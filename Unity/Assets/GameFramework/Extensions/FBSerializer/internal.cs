// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Serial
{

using global::System;
using global::FlatBuffers;

public struct FBVector2 : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static FBVector2 GetRootAsFBVector2(ByteBuffer _bb) { return GetRootAsFBVector2(_bb, new FBVector2()); }
  public static FBVector2 GetRootAsFBVector2(ByteBuffer _bb, FBVector2 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBVector2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Serial.FBVector2> CreateFBVector2(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f) {
    builder.StartTable(2);
    FBVector2.AddY(builder, y);
    FBVector2.AddX(builder, x);
    return FBVector2.EndFBVector2(builder);
  }

  public static void StartFBVector2(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static Offset<Serial.FBVector2> EndFBVector2(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.FBVector2>(o);
  }
};

public struct FBVector3 : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static FBVector3 GetRootAsFBVector3(ByteBuffer _bb) { return GetRootAsFBVector3(_bb, new FBVector3()); }
  public static FBVector3 GetRootAsFBVector3(ByteBuffer _bb, FBVector3 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBVector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Serial.FBVector3> CreateFBVector3(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f) {
    builder.StartTable(3);
    FBVector3.AddZ(builder, z);
    FBVector3.AddY(builder, y);
    FBVector3.AddX(builder, x);
    return FBVector3.EndFBVector3(builder);
  }

  public static void StartFBVector3(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(2, z, 0.0f); }
  public static Offset<Serial.FBVector3> EndFBVector3(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.FBVector3>(o);
  }
};

public struct FBVector4 : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static FBVector4 GetRootAsFBVector4(ByteBuffer _bb) { return GetRootAsFBVector4(_bb, new FBVector4()); }
  public static FBVector4 GetRootAsFBVector4(ByteBuffer _bb, FBVector4 obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBVector4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float W { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Serial.FBVector4> CreateFBVector4(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f,
      float w = 0.0f) {
    builder.StartTable(4);
    FBVector4.AddW(builder, w);
    FBVector4.AddZ(builder, z);
    FBVector4.AddY(builder, y);
    FBVector4.AddX(builder, x);
    return FBVector4.EndFBVector4(builder);
  }

  public static void StartFBVector4(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(2, z, 0.0f); }
  public static void AddW(FlatBufferBuilder builder, float w) { builder.AddFloat(3, w, 0.0f); }
  public static Offset<Serial.FBVector4> EndFBVector4(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.FBVector4>(o);
  }
};

public struct FBQuaternion : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static FBQuaternion GetRootAsFBQuaternion(ByteBuffer _bb) { return GetRootAsFBQuaternion(_bb, new FBQuaternion()); }
  public static FBQuaternion GetRootAsFBQuaternion(ByteBuffer _bb, FBQuaternion obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBQuaternion __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Y { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Z { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float W { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<Serial.FBQuaternion> CreateFBQuaternion(FlatBufferBuilder builder,
      float x = 0.0f,
      float y = 0.0f,
      float z = 0.0f,
      float w = 0.0f) {
    builder.StartTable(4);
    FBQuaternion.AddW(builder, w);
    FBQuaternion.AddZ(builder, z);
    FBQuaternion.AddY(builder, y);
    FBQuaternion.AddX(builder, x);
    return FBQuaternion.EndFBQuaternion(builder);
  }

  public static void StartFBQuaternion(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddX(FlatBufferBuilder builder, float x) { builder.AddFloat(0, x, 0.0f); }
  public static void AddY(FlatBufferBuilder builder, float y) { builder.AddFloat(1, y, 0.0f); }
  public static void AddZ(FlatBufferBuilder builder, float z) { builder.AddFloat(2, z, 0.0f); }
  public static void AddW(FlatBufferBuilder builder, float w) { builder.AddFloat(3, w, 0.0f); }
  public static Offset<Serial.FBQuaternion> EndFBQuaternion(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.FBQuaternion>(o);
  }
};

public struct FBMaterial : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static FBMaterial GetRootAsFBMaterial(ByteBuffer _bb) { return GetRootAsFBMaterial(_bb, new FBMaterial()); }
  public static FBMaterial GetRootAsFBMaterial(ByteBuffer _bb, FBMaterial obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBMaterial __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string MaterialName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaterialNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetMaterialNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetMaterialNameArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Serial.FBMaterial> CreateFBMaterial(FlatBufferBuilder builder,
      StringOffset materialNameOffset = default(StringOffset)) {
    builder.StartTable(1);
    FBMaterial.AddMaterialName(builder, materialNameOffset);
    return FBMaterial.EndFBMaterial(builder);
  }

  public static void StartFBMaterial(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddMaterialName(FlatBufferBuilder builder, StringOffset materialNameOffset) { builder.AddOffset(0, materialNameOffset.Value, 0); }
  public static Offset<Serial.FBMaterial> EndFBMaterial(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.FBMaterial>(o);
  }
};

public struct FBRef : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static FBRef GetRootAsFBRef(ByteBuffer _bb) { return GetRootAsFBRef(_bb, new FBRef()); }
  public static FBRef GetRootAsFBRef(ByteBuffer _bb, FBRef obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBRef __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartFBRef(FlatBufferBuilder builder) { builder.StartTable(0); }
  public static Offset<Serial.FBRef> EndFBRef(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.FBRef>(o);
  }
};

public struct FBUID : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static FBUID GetRootAsFBUID(ByteBuffer _bb) { return GetRootAsFBUID(_bb, new FBUID()); }
  public static FBUID GetRootAsFBUID(ByteBuffer _bb, FBUID obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBUID __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Serial.FBUID> CreateFBUID(FlatBufferBuilder builder,
      int id = 0) {
    builder.StartTable(1);
    FBUID.AddId(builder, id);
    return FBUID.EndFBUID(builder);
  }

  public static void StartFBUID(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static Offset<Serial.FBUID> EndFBUID(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.FBUID>(o);
  }
};

public struct FBComponent : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static FBComponent GetRootAsFBComponent(ByteBuffer _bb) { return GetRootAsFBComponent(_bb, new FBComponent()); }
  public static FBComponent GetRootAsFBComponent(ByteBuffer _bb, FBComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Serial.FBUID? Id { get { int o = __p.__offset(4); return o != 0 ? (Serial.FBUID?)(new Serial.FBUID()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Serial.FBUID? Entity { get { int o = __p.__offset(6); return o != 0 ? (Serial.FBUID?)(new Serial.FBUID()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool WasConstructed { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Serial.FBComponent> CreateFBComponent(FlatBufferBuilder builder,
      Offset<Serial.FBUID> idOffset = default(Offset<Serial.FBUID>),
      Offset<Serial.FBUID> entityOffset = default(Offset<Serial.FBUID>),
      bool wasConstructed = false) {
    builder.StartTable(3);
    FBComponent.AddEntity(builder, entityOffset);
    FBComponent.AddId(builder, idOffset);
    FBComponent.AddWasConstructed(builder, wasConstructed);
    return FBComponent.EndFBComponent(builder);
  }

  public static void StartFBComponent(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddId(FlatBufferBuilder builder, Offset<Serial.FBUID> idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddEntity(FlatBufferBuilder builder, Offset<Serial.FBUID> entityOffset) { builder.AddOffset(1, entityOffset.Value, 0); }
  public static void AddWasConstructed(FlatBufferBuilder builder, bool wasConstructed) { builder.AddBool(2, wasConstructed, false); }
  public static Offset<Serial.FBComponent> EndFBComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.FBComponent>(o);
  }
};

public struct DTEST_int_int : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static DTEST_int_int GetRootAsDTEST_int_int(ByteBuffer _bb) { return GetRootAsDTEST_int_int(_bb, new DTEST_int_int()); }
  public static DTEST_int_int GetRootAsDTEST_int_int(ByteBuffer _bb, DTEST_int_int obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTEST_int_int __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Key { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Value { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Serial.DTEST_int_int> CreateDTEST_int_int(FlatBufferBuilder builder,
      int key = 0,
      int value = 0) {
    builder.StartTable(2);
    DTEST_int_int.AddValue(builder, value);
    DTEST_int_int.AddKey(builder, key);
    return DTEST_int_int.EndDTEST_int_int(builder);
  }

  public static void StartDTEST_int_int(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKey(FlatBufferBuilder builder, int key) { builder.AddInt(0, key, 0); }
  public static void AddValue(FlatBufferBuilder builder, int value) { builder.AddInt(1, value, 0); }
  public static Offset<Serial.DTEST_int_int> EndDTEST_int_int(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.DTEST_int_int>(o);
  }
};

public struct DTEST_Component_Component : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static DTEST_Component_Component GetRootAsDTEST_Component_Component(ByteBuffer _bb) { return GetRootAsDTEST_Component_Component(_bb, new DTEST_Component_Component()); }
  public static DTEST_Component_Component GetRootAsDTEST_Component_Component(ByteBuffer _bb, DTEST_Component_Component obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DTEST_Component_Component __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Serial.FBComponent? Key { get { int o = __p.__offset(4); return o != 0 ? (Serial.FBComponent?)(new Serial.FBComponent()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Serial.FBComponent? Value { get { int o = __p.__offset(6); return o != 0 ? (Serial.FBComponent?)(new Serial.FBComponent()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Serial.DTEST_Component_Component> CreateDTEST_Component_Component(FlatBufferBuilder builder,
      Offset<Serial.FBComponent> keyOffset = default(Offset<Serial.FBComponent>),
      Offset<Serial.FBComponent> valueOffset = default(Offset<Serial.FBComponent>)) {
    builder.StartTable(2);
    DTEST_Component_Component.AddValue(builder, valueOffset);
    DTEST_Component_Component.AddKey(builder, keyOffset);
    return DTEST_Component_Component.EndDTEST_Component_Component(builder);
  }

  public static void StartDTEST_Component_Component(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddKey(FlatBufferBuilder builder, Offset<Serial.FBComponent> keyOffset) { builder.AddOffset(0, keyOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<Serial.FBComponent> valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static Offset<Serial.DTEST_Component_Component> EndDTEST_Component_Component(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.DTEST_Component_Component>(o);
  }
};

public struct FBGenTemplateComponent : IFlatbufferObject
{
  private Table __p;
/// <summary>
/// expose the current flatbuffer-object's position inside the buffer
/// </summary>
public int BufferPosition { get { return __p.bb_pos; } }
public Table __table { get { return __p; } }
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_11_1(); }
  public static FBGenTemplateComponent GetRootAsFBGenTemplateComponent(ByteBuffer _bb) { return GetRootAsFBGenTemplateComponent(_bb, new FBGenTemplateComponent()); }
  public static FBGenTemplateComponent GetRootAsFBGenTemplateComponent(ByteBuffer _bb, FBGenTemplateComponent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FBGenTemplateComponent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Serial.FBComponent? BaseData { get { int o = __p.__offset(4); return o != 0 ? (Serial.FBComponent?)(new Serial.FBComponent()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int State { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TestName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTestNameBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetTestNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTestNameArray() { return __p.__vector_as_array<byte>(8); }
  public Serial.FBUID? TestUID { get { int o = __p.__offset(10); return o != 0 ? (Serial.FBUID?)(new Serial.FBUID()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public float TestNumber { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public Serial.FBUID? TestListUID(int j) { int o = __p.__offset(14); return o != 0 ? (Serial.FBUID?)(new Serial.FBUID()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TestListUIDLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int TestListUIDBufferPosition { get { int o = __p.__offset(14); return o != 0 ? __p.__vector(o) : 0; } }
  public int TestListPrimitive(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int TestListPrimitiveLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int TestListPrimitiveBufferPosition { get { int o = __p.__offset(16); return o != 0 ? __p.__vector(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTestListPrimitiveBytes() { return __p.__vector_as_span(16); }
#else
  public ArraySegment<byte>? GetTestListPrimitiveBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetTestListPrimitiveArray() { return __p.__vector_as_array<int>(16); }
  public Serial.DTEST_int_int? TestDict(int j) { int o = __p.__offset(18); return o != 0 ? (Serial.DTEST_int_int?)(new Serial.DTEST_int_int()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TestDictLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int TestDictBufferPosition { get { int o = __p.__offset(18); return o != 0 ? __p.__vector(o) : 0; } }
  public Serial.DTEST_Component_Component? TestDictNonPrim(int j) { int o = __p.__offset(20); return o != 0 ? (Serial.DTEST_Component_Component?)(new Serial.DTEST_Component_Component()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TestDictNonPrimLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int TestDictNonPrimBufferPosition { get { int o = __p.__offset(20); return o != 0 ? __p.__vector(o) : 0; } }

  public static Offset<Serial.FBGenTemplateComponent> CreateFBGenTemplateComponent(FlatBufferBuilder builder,
      Offset<Serial.FBComponent> baseDataOffset = default(Offset<Serial.FBComponent>),
      int state = 0,
      StringOffset testNameOffset = default(StringOffset),
      Offset<Serial.FBUID> testUIDOffset = default(Offset<Serial.FBUID>),
      float testNumber = 0.0f,
      VectorOffset testListUIDOffset = default(VectorOffset),
      VectorOffset testListPrimitiveOffset = default(VectorOffset),
      VectorOffset testDictOffset = default(VectorOffset),
      VectorOffset testDictNonPrimOffset = default(VectorOffset)) {
    builder.StartTable(9);
    FBGenTemplateComponent.AddTestDictNonPrim(builder, testDictNonPrimOffset);
    FBGenTemplateComponent.AddTestDict(builder, testDictOffset);
    FBGenTemplateComponent.AddTestListPrimitive(builder, testListPrimitiveOffset);
    FBGenTemplateComponent.AddTestListUID(builder, testListUIDOffset);
    FBGenTemplateComponent.AddTestNumber(builder, testNumber);
    FBGenTemplateComponent.AddTestUID(builder, testUIDOffset);
    FBGenTemplateComponent.AddTestName(builder, testNameOffset);
    FBGenTemplateComponent.AddState(builder, state);
    FBGenTemplateComponent.AddBaseData(builder, baseDataOffset);
    return FBGenTemplateComponent.EndFBGenTemplateComponent(builder);
  }

  public static void StartFBGenTemplateComponent(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddBaseData(FlatBufferBuilder builder, Offset<Serial.FBComponent> baseDataOffset) { builder.AddOffset(0, baseDataOffset.Value, 0); }
  public static void AddState(FlatBufferBuilder builder, int state) { builder.AddInt(1, state, 0); }
  public static void AddTestName(FlatBufferBuilder builder, StringOffset testNameOffset) { builder.AddOffset(2, testNameOffset.Value, 0); }
  public static void AddTestUID(FlatBufferBuilder builder, Offset<Serial.FBUID> testUIDOffset) { builder.AddOffset(3, testUIDOffset.Value, 0); }
  public static void AddTestNumber(FlatBufferBuilder builder, float testNumber) { builder.AddFloat(4, testNumber, 0.0f); }
  public static void AddTestListUID(FlatBufferBuilder builder, VectorOffset testListUIDOffset) { builder.AddOffset(5, testListUIDOffset.Value, 0); }
  public static VectorOffset CreateTestListUIDVector(FlatBufferBuilder builder, Offset<Serial.FBUID>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTestListUIDVectorBlock(FlatBufferBuilder builder, Offset<Serial.FBUID>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTestListUIDVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTestListPrimitive(FlatBufferBuilder builder, VectorOffset testListPrimitiveOffset) { builder.AddOffset(6, testListPrimitiveOffset.Value, 0); }
  public static VectorOffset CreateTestListPrimitiveVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateTestListPrimitiveVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTestListPrimitiveVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTestDict(FlatBufferBuilder builder, VectorOffset testDictOffset) { builder.AddOffset(7, testDictOffset.Value, 0); }
  public static VectorOffset CreateTestDictVector(FlatBufferBuilder builder, Offset<Serial.DTEST_int_int>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTestDictVectorBlock(FlatBufferBuilder builder, Offset<Serial.DTEST_int_int>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTestDictVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTestDictNonPrim(FlatBufferBuilder builder, VectorOffset testDictNonPrimOffset) { builder.AddOffset(8, testDictNonPrimOffset.Value, 0); }
  public static VectorOffset CreateTestDictNonPrimVector(FlatBufferBuilder builder, Offset<Serial.DTEST_Component_Component>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTestDictNonPrimVectorBlock(FlatBufferBuilder builder, Offset<Serial.DTEST_Component_Component>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTestDictNonPrimVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Serial.FBGenTemplateComponent> EndFBGenTemplateComponent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Serial.FBGenTemplateComponent>(o);
  }
};


}
