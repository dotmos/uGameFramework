// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Serial
{

using global::System;
using global::FlatBuffers;

public struct All : IFlatbufferObject
{
  private Table __p;
public int pos { get { return __p.bb_pos; } }  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static All GetRootAsAll(ByteBuffer _bb) { return GetRootAsAll(_bb, new All()); }
  public static All GetRootAsAll(ByteBuffer _bb, All obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public All __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public FBUID? N1 { get { int o = __p.__offset(4); return o != 0 ? (FBUID?)(new FBUID()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public FBUID? N2 { get { int o = __p.__offset(6); return o != 0 ? (FBUID?)(new FBUID()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public FBUID? N3 { get { int o = __p.__offset(8); return o != 0 ? (FBUID?)(new FBUID()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<All> CreateAll(FlatBufferBuilder builder,
      Offset<FBUID> n1Offset = default(Offset<FBUID>),
      Offset<FBUID> n2Offset = default(Offset<FBUID>),
      Offset<FBUID> n3Offset = default(Offset<FBUID>)) {
    builder.StartObject(3);
    All.AddN3(builder, n3Offset);
    All.AddN2(builder, n2Offset);
    All.AddN1(builder, n1Offset);
    return All.EndAll(builder);
  }

  public static void StartAll(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddN1(FlatBufferBuilder builder, Offset<FBUID> n1Offset) { builder.AddOffset(0, n1Offset.Value, 0); }
  public static void AddN2(FlatBufferBuilder builder, Offset<FBUID> n2Offset) { builder.AddOffset(1, n2Offset.Value, 0); }
  public static void AddN3(FlatBufferBuilder builder, Offset<FBUID> n3Offset) { builder.AddOffset(2, n3Offset.Value, 0); }
  public static Offset<All> EndAll(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<All>(o);
  }
};


}
