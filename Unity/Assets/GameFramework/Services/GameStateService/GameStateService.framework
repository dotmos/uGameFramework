## service start 
using System.Collections.Generic;
using MoonSharp.Interpreter;
    
namespace Service.GameStateService {  
    public interface IGameStateService {  	
    	## "Register gamestate with its name. Optionally you can pass an overriden GameState-Classtype of your own"
		("GameState") RegisterGameState(string name,("GameState") gamestate=("null"));
		## "Get the current gamestate. Alternatively use \"[Inject] GameState current;\""
		("GameState") GetCurrentGameState();
		## "Start a new gamestate after stopping the current one (if present). Optionally pass a context in which you can e.g. set gamestate-flags"
		("IObservable<bool>") StartGameState(("GameState") gamestate,GSContext ctx=("null"));
		("IObservable<bool>") StopGameState(("GameState") gamestate);
		## "Get gamestate by name"
		("GameState") GetGameState(string name);
		
		## "Tick the current gamestate."
		void Tick(float deltaTime, float unscaledDeltaTime);
    }  
}  
## model

public enum GSStatus {
	noneStatus,starting,running,closing
}

public class GSContext{
}
  
  
## events 

public class GameStateBeforeTick{
	public ("GameState") gameState;
}
public class GameStateAfterTick{
	public ("GameState") gameState;
}
public class GameStateBeforeEnter{
	public ("GameState") gameState;
}
public class GameStateAfterEnter{
	public ("GameState") gameState;
}
public class GameStateBeforeExit{
	public ("GameState") gameState;
}
public class GameStateAfterExit{
	public ("GameState") gameState;
}

## service end