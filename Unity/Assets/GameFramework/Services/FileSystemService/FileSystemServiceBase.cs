///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 
using System;
using System.Collections.Generic;
using MoonSharp.Interpreter;


using UniRx;
using Zenject;

namespace Service.FileSystem
{
    public  abstract class FileSystemServiceBase : IFileSystemService, IDisposable
    {
        protected DisposableManager _dManager;
        protected Service.Events.IEventsService _eventService;
        protected Service.AsyncManager.IAsyncManager _asyncManager;

        protected CompositeDisposable disposables = new CompositeDisposable();

        protected ReactivePriorityExecutionList rxOnStartup {
            get { return Kernel.Instance.rxStartup; }
        }
        protected ReactivePriorityExecutionList rxOnShutdown {
            get { return Kernel.Instance.rxShutDown; }
        }

        [Inject]
        void Initialize( 
          [Inject] DisposableManager dManager,
          [Inject] Service.Events.IEventsService eventService,
          [Inject] Service.AsyncManager.IAsyncManager asyncManager
        ) {
            _dManager = dManager;
            _eventService = eventService;
            _asyncManager = asyncManager;
            // register as disposable
            _dManager.Add(this);

            try {
                AfterInitialize();
                Observable.NextFrame().Subscribe(_ => {
                    InitAPI();
                });
            }
            catch (Exception e) {
                UnityEngine.Debug.LogError("Catched exception in Service-AfterInitialize() from service:" + GetType());
                UnityEngine.Debug.LogException(e);
            }
        }

        protected abstract void InitAPI();

        protected void ActivateDefaultScripting(string name) {
            try {
                var cmdGetScript = new Service.Scripting.Commands.GetMainScriptCommand();
                Publish(cmdGetScript);
                cmdGetScript.result.Globals[name] = this;
            }
            catch (Exception e) {
                UnityEngine.Debug.LogError("Error activating default scripting for Service.FileSystem with lua-name:" + name);
                UnityEngine.Debug.LogException(e);
            }
        }

        /// <summary>
        /// Publish the specified global event.
        /// </summary>
        /// <param name="evt">Evt.</param>
        protected void Publish(object evt) {
            _eventService.Publish(evt);
        }
        protected void Publish(object evt, Subject<object> eventStream) {
            _eventService.Publish(evt, eventStream);
        }

        /// <summary>
        /// Subscribe to a global event of type TEvent
        /// </summary>
        /// <typeparam name="TEvent">The 1st type parameter.</typeparam>
        protected IObservable<TEvent> OnEvent<TEvent>() {
            return _eventService.OnEvent<TEvent>();
        }
        protected IObservable<TEvent> OnEvent<TEvent>(Subject<object> eventStream) {
            return _eventService.OnEvent<TEvent>(eventStream);
        }

        public void AddDisposable(IDisposable disposable) {
            disposables.Add(disposable);
        }

        // overwrite this method to be called right after eventmanger and dManager got initalized
        protected virtual void AfterInitialize() {

        }

        bool isDisposed = false;

        public virtual void Dispose() {
            //if (isDisposed || Kernel.applicationQuitting) return;
            if (isDisposed) return;
            isDisposed = true;
            disposables.Dispose();

            OnDispose();

            _dManager.Remove(this);
        }

        protected virtual void OnDispose() { }

        
                                                          
        public abstract string GetPath(FSDomain domain,string realtivePart="");
        
        public abstract bool WriteBytesToFile(string pathToFile,byte[] bytes);
        
        public abstract bool WriteBytesToFileAtDomain(FSDomain domain,string relativePathToFile,byte[] bytes);
        
        public abstract bool WriteStringToFile(string pathToFile,string thedata);
        
        public abstract bool WriteStringToFileAtDomain(FSDomain domain,string relativePathToFile,string thedata);
        
        public abstract string LoadFileAsString(string pathToFile);
        
        public abstract string LoadFileAsStringAtDomain(FSDomain domain,string relativePathToFile);
        
        public abstract byte[] LoadFileAsBytes(string pathToFile);
        
        public abstract byte[] LoadFileAsBytesAtDomain(FSDomain domain,string relativePathToFile);
        
        public abstract List<string> GetFilesInAbsFolder(string absPath,string pattern="*.*");
        
        public abstract List<string> GetFilesInDomain(FSDomain domain,string innerDomainPath="",string filter="*.*");
        
        public abstract void RemoveFile(string filePath);
        
        public abstract void RemoveFileInDomain(FSDomain domain,string relativePath);
        
        public abstract bool FileExists(string pathToFile);
        
        public abstract bool FileExistsInDomain(FSDomain domain,string relativePath);
        
    }
}
///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 
