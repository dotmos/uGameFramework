//using UnityEngine;
//using NodeEditorFramework;
//using NodeEditorFramework.Utilities;
//using System.Runtime.Serialization;
//using Service.AI;
//using System.Collections.Generic;
//using System;
//using Service.AI.Strategy;

///*block:impl*/

//namespace /*name:namespace*/Service.GeneratorPrototype/*endname*/ {
//    [DataContract (IsReference = true)]
//    public class /*name|pre#FSM:nodeName*/FSMPrototype/*endname*/ : /*name|pre#FSM,post#Base:nodeName*/FSMPrototypeBase/*endname*/  {
//        public override bool CheckCondition() {
//            return base.CheckCondition();
//        }

//        public override void DoAction() {
//            base.DoAction();
//        }
//    }


//    [Node(/*name:hidden*/false/*endname*/, /*name|dq:path*/"PC/temp/PrototypeBase"/*endname*/)]
//    public class /*name:nodeImpl*/PrototypeNodeImpl/*endname*/ : /*name|post#Base:nodeName*/PrototypeNodeBase/*endname*/ {


//        //  Here you can create custom inputs and outputs
//        public override Node Create(Vector2 pos) {
//            return base.Create(pos);
//        } 
//    }
//}
///*endblock:impl*/
///*block:base*/
/////////////////////////////////////////////////////////////////////////
////
//// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
////
//////////////////////////////////////////////////////////////////////// 
///*block:declEnum*/
///*block:declaration*/
//public enum /*name:name*/TestEnumType/*endname*/ { /*name:values*/Cheapest, Nearest, BestRadius/*endname*/ }/*endblock:declaration*/
///*endblock:declEnum*/

//namespace /*name:namespace*/Service.GeneratorPrototype/*endname*/ {


//    /*block:FSMBase*/
//    [DataContract(IsReference = true)]
//    public class /*name:fsmBaseName*/FSMPrototypeBase/*endname*/ : DefaultBrick {
//        // properties
//  /*block:prop*/
//        public /*name:type*/float/*endname*/ /*name:fsmPropName*/prop_InputHealth/*endname*/ /*name:defaultValue*/= 0.95f/*endname*/;
//        // serialize /*name:fsmPropName*/prop_InputHealth/*endname*/
//        [DataMember(Name = /*name|dq:fsmPropName*/"PropInputHealth"/*endname*/)]
//        /*name:type*/
//        float/*endname*/ /*name|pre#DATA_:fsmPropName*/DATA_prop_InputHealth/*endname*/ {
//            get { return /*name:fsmPropName*/prop_InputHealth/*endname*/; }
//            set { /*name:fsmPropName*/prop_InputHealth/*endName*/ = value; }
//        }
//  /*endblock:prop*/
//  // --------------- sockets -----------------------------
//  /*block:socket*/
//        public FSMProperty</*name:type*/float/*endname*/> /*name:fsmSocketName*/input_Health/*endname*/;
//        // serialize /*name:fsmSocketName*/input_Health/*endname*/
//        [DataMember(Name = /*name|dq:fsmSocketName*/"PropInputHealth"/*endname*/)]
//        FSMProperty</*name:type*/float/*endname*/> /*name|pre#DATA_:fsmSocketName*/DATA_InputHealth/*endname*/ {
//            get { return /*name:fsmSocketName*/input_Health/*endname*/; }
//            set { /*name:fsmSocketName*/input_Health/*endname*/ = value; }
//        }
//        /*endblock:socket*/

//        /*block:rip*/public FSMProperty<bool> output_doAction; /*endblock:rip*/

//   // FollowUpActions (List of actions that are conntected to this node)
//  /*block:followupAction*/      public List<IAction> /*name:actionsName*/actions_doAction/*endname*/ = new List<IAction>();
//        // serialize /*name:actionsName*/input_Health/*endname*/
//        [DataMember(Name = /*name|dq:actionsName*/"actions_doAction"/*endname*/)]
//        List<IAction> /*name|pre#DATA_:actionsName*/DATA_actions_doAction/*endname*/ {
//            get { return /*name:actionsName*/actions_doAction/*endname*/; }
//            set { /*name:actionsName*/actions_doAction/*endname*/ = value; }
//        }  
//  /*endblock:followupAction*/

//        public /*name:fsmBaseName*/FSMPrototypeBase/*endname*/() {
//        }

//        public override void AfterLoad() {
///*block:wireParentBrick*/            /*name:fsmSocketName*/input_Health/*endname*/.AfterLoad(FSM);
///*endblock:wireParentBrick*/
//        }

//        public void setDataFromNode(/*name:nodeName*/PrototypeNodeBase/*endname*/ node) {
//            NPCPlayer = node.npcPlayer;
//  /*block:propNodeMapping*/            /*name:fsmPropName*/prop_InputHealth/*endname*/ = node./*name:fsmNodePropName*/InputHealth/*endname*/;
//  /*endblock:propNodeMapping*/
//  /*block:outputSocketSet*/          /*name:fsmSocketName*/output_doAction/*endname*/ = CreateOutput</*name:type*/bool/*endname*/>(/*name|dq:socketName*/"doAction"/*endname*/, default(/*name:type*/bool/*endname*/));
//            /*endblock:outputSocketSet*/
//            wireAction = new Action(() => {
//  /*block:inputSocketSet*/              
//    /*block:primitive*/                
//                /*name:fsmSocketName*/input_Health/*endname*/ = node.GetInputFSMProperty</*name:type*/float/*endname*/>(/*name|dq:socketName*/"input_Health"/*endname*/, node./*name:fsmSocketName*/InputHealth/*endname*/);
//                /*name:fsmSocketName*/input_Health/*endname*/.RegisterInputNode(this);
//    /*endblock:primitive*/
//    /*block:other*/
//                /*name:fsmSocketName*/input_Health/*endname*/ = node.GetInputFSMProperty</*name:type*/float/*endname*/>(/*name|dq:socketName*/"input_Health"/*endname*/, default(/*name:type*/float/*endname*/));
//                /*name:fsmSocketName*/input_Health/*endname*/.RegisterInputNode(this);
//    /*endblock:other*/
//                /*endblock:inputSocketSet*/
//  /*block:outputAction*/                /*name:actionsName*/actions_doAction/*endname*/ = node.GetOutputActions(/*name|dq:socketName*/"doAction"/*endname*/);
//  /*endblock:outputAction*/
//            });
//        }

//    }
///*endblock:FSMBase*/

//    [Node(true, "HIDE")]
//    public class /*name:nodeName*/PrototypeNodeBase/*endname*/ : PCNodeBase {
//        public string propStateName;
///*block:declEnumVar*/
//        public /*name:name*/TestEnumType/*endname*/ /*name|pre#prop_:commandParamName*/type/*endname*/;
//        /*endblock:declEnumVar*/
//        public const string NODE_ID = /*name|dq:nodeName*/"PrototypeNode"/*endname*/;
//        public override string GetNodeID { get { return NODE_ID; } }

///*block:inputValue*/
//        public /*name:type*/float/*endname*/ /*name:socketName*/InputHealth/*endname*/;
///*endblock:inputValue*/
///*block:inputValueNode*/        public PCNodeBase /*name:socketName*/state/*endname*/;
///*endblock:inputValueNode*/



///*block:rip*/
//        public string InputSettings = "thesettings";
//        public bool boolValue = true;
//        public string textValue = "Forty";
//        public int intValue = 95;
//        public object objValue = null;
///*endblock:rip*/

//        // you have to call this actively
//        public void SetDefaultValues() {
//            propStateName = "";
//        /*block:declEnumPreBind*/        
//        /*name|pre#prop_:commandParamName*/type/*endname*/ = /*name:enumName*/TestEnumType/*endname*/./*name:defaultValue*/Cheapest/*endname*/;
//        /*endblock:declEnum*/

//        /*block:inputValuePreBind*/
//        /*name:socketName*/
//        InputHealth/*endname*//*block:valueBlock*/=/*name:value*/0/*endname*//*endblock:valueBlock*/;
//        /*endblock:inputValuePreBind*/
//        /*block:rip*/
//            InputSettings = "thesettings";
//            boolValue = true;
//            textValue = "Forty";
//            intValue = 95;
//            objValue = null;
//        /*endblock:rip*/
//    }

//    public override Node Create(Vector2 pos) {
//           /*name:nodeImpl*/PrototypeNodeImpl/*endname*/ node = CreateInstance</*name:nodeImpl*/PrototypeNodeImpl/*endname*/>();
//            //if (!preBound) {
//            //    node.PreBind();
//            //}
//            node.name = /*name|dq:nodeImpl*/"PrototypeNodeImpl"/*endname*/;
//            node.rect = new Rect(pos.x, pos.y, /*name:width*/250/*endname*/, /*name:height*/230/*endname*/);
//            NodeKnob current = null;
///*block:inputSocket*/     current=node.CreateInput(/*name|dq:socketName*/"Health"/*endname*/, /*name|dq,fu:type*/"Float"/*endname*/);
//            current.SetGroup(/*name|dq:group*/"default"/*endname*/);
///*endblock:inputSocket*/
///*block:rip*/            node.CreateInput("settings", "String");
///*endblock:rip*/
///*block:outputSocket*/            current=node.CreateOutput(/*name|dq:socketName*/"CurrentHealth"/*endname*/, /*name|dq,fu:type*/"Float"/*endname*/);
//            current.SetGroup(/*name|dq:group*/"default"/*endname*/);
///*endblock:outputSocket*/
///*block:multiConnectionOutput*/            node.CreateOutput(/*name|dq:socketName*/"doAction"/*endname*/, /*name|dq,fu:type*/"StateAction"/*endname*/, NodeSide.Top, knobposHorizontalCenter(1+/*name:idx*/0/*endname*/),/*name|dq:group*/"default"/*endname*/);
//            node.CreateOutput(/*name|dq:socketName*/"doAction"/*endname*/, /*name|dq,fu:type*/"StateAction"/*endname*/, NodeSide.Bottom, knobposHorizontalCenter(1+/*name:idx*/0/*endname*/), /*name|dq:group*/"default"/*endname*/);
//            node.CreateOutput(/*name|dq:socketName*/"doAction"/*endname*/, /*name|dq,fu:type*/"StateAction"/*endname*/, NodeSide.Left, knobposVerticalBottom( /*name:idx*/0/*endname*/), /*name|dq:group*/"default"/*endname*/);
///*endblock:multiConnectionOutput*/

///*block:rip*/
//            node.CreateOutput("CurrentSpeed", "Float");
///*endblock:rip*/

///*block:multiConnectionInput*/            
//        node.CreateInput(/*name|dq:socketName*/"doAction"/*endname*/, /*name|dq,fu:type*/"StateAction"/*endname*/, NodeSide.Top, knobposHorizontalCenter(-1-/*name:idx*/0/*endname*/),/*name|dq:group*/"default"/*endname*/);
//        node.CreateInput(/*name|dq:socketName*/"doAction"/*endname*/, /*name|dq,fu:type*/"StateAction"/*endname*/, NodeSide.Bottom, 10 + knobposHorizontalCenter(-1 -/*name:idx*/0/*endname*/), /*name|dq:group*/"default"/*endname*/);
//        node.CreateInput(/*name|dq:socketName*/"doAction"/*endname*/, /*name|dq,fu:type*/"StateAction"/*endname*/, NodeSide.Right, 10+/*name:idx*/0/*endname*/*15, /*name|dq:group*/"default"/*endname*/);
///*endblock:multiConnection*/


//            return node;
//        }

//        protected internal override void NodeGUI() {
//            /*block:header*/
//            GUILayout.Label(/*name|dq:headerText*/"This is a custom Node!"/*endname*/);
//            /*endblock:header*/
 
///*block:enumGUI*/
//#if UNITY_EDITOR
//            /*name:enumVarName*/type/*endname*/ = (/*name:enumName*/TestEnumType/*endname*/)UnityEditor.EditorGUILayout.EnumPopup(new GUIContent(/*name|dq:enumName*/"TestEnumHeader"/*endname*/, /*name|dq:description*/"TestEnum Description")/*endname*/, /*name:enumVarName*/type/*endname*/);
//#else
//			//GUILayout.Label (new GUIContent ("Calculation Type: " + type.ToString (), "The type of calculation performed on Input 1 and Input 2"));
//#endif
//            /*endblock:enumGUI*/

//            /*block:float*/     /*name:socketName*/InputHealth/*endname*/ = RTEditorGUI.FloatField(/*name|dq:pureName*/"InputHealth"/*endname*/, /*name:socketName*/InputHealth/*endname*/);
//            /*endblock:float*/
//            /*block:int*/     /*name:socketName*/intValue/*endname*/ = RTEditorGUI.IntField(/*name|dq:pureName*/"intValue"/*endname*/, /*name:socketName*/intValue/*endname*/);
            
//            /*endblock:int*/
//            /*block:bool*/      /*name:socketName*/boolValue/*endname*/ = RTEditorGUI.Toggle(/*name:socketName*/boolValue/*endname*/, /*name|dq:pureName*/"bool"/*endname*/, new GUILayoutOption[0]);
//            /*endblock:bool*/
//            /*block:string*/        /*name:socketName*/textValue/*endname*/ = RTEditorGUI.TextField(new GUIContent(/*name|dq:pureName*/"textValue"/*endname*/),/*name:socketName*/textValue/*endname*/, GUIStyle.none, new GUILayoutOption[0]);
//            /*endblock:string*/
//            /*block:object*/GUILayout.Label( /*name|dq:socketName*/"object"/*endname*/);
//            /*endblock:object*/

//            GUILayout.BeginHorizontal();
//            GUILayout.BeginVertical(GUILayout.MaxWidth(100));
///*block:inputGUI*/
// /*block:defaultBlock*/ 
//            if (Inputs[/*name:idx*/0/*endname*/].connection != null)
//                GUILayout.Label( Inputs[/*name:idx*/0/*endname*/].name);
//            else {
//            /*block:guiElement*//*endblock:guiElement*/
//            } 
// /*endblock:defaultBlock*/
// /*block:justLabel*/
//            GUILayout.Label( Inputs[/*name:idx*/0/*endname*/].name);
// /*endblock:justLabel*/
//            InputKnob(/*name:idx*/0/*endname*/);
///*endblock:inputGUI*/
///*block:rip*/
//            // --
//            if (Inputs[1].connection != null)
//                GUILayout.Label(Inputs[1].name);
//            else
//                InputSettings = RTEditorGUI.TextField(new GUIContent("settings","the settings"), InputSettings,GUIStyle.none,new GUILayoutOption[0]);
//            InputKnob(1);
///*endblock:rip*/
//           // GUILayout.EndVertical();
//           // GUILayout.BeginVertical();
///*block:outputGUI*/
//            if (Outputs.Count >/*name:idx*/0/*endname*/) {
//                Outputs[/*name:idx*/0/*endname*/].DisplayLayout();
//            }
///*endblock:outputGUI*/
//            /*block:rip*/
//            Outputs[1].DisplayLayout();
///*endblock:rip*/
//            GUILayout.EndVertical();
//            GUILayout.EndHorizontal();

//            //if (GUI.changed)
//            //    NodeEditor.RecalculateFrom(this);
//        }




//        public void OnEnable() {
///*block:checkInputs*/
//            foreach (NodeInput input in Inputs) {
// /*block:socketMapping*/
//                if (input.connection != null && input.GetGroup() == /*name|dq:group*/"toState"/*endname*/ && input.connection.body != null) {
//                    /*name:socketName*/state/*endname*/ = (PCNodeBase)input.connection.body;
//                }
// /*endblock:socketMapping*/
//            }
///*endblock:checkInputs*/
///*block:checkOutputs*/
//            //foreach (NodeOutput output in Outputs) {
//            //    if (output.connections.Count > 0 && output.GetGroup() == "fromState") {
//            //        fromNode = (StateNode)output.connections[0].body;
//            //        setSocketToVisibleRestInvisible<NodeOutput>(output, GetOutputKnobGroup("fromState"));
//            //        break;
//            //    }
//            //}
///*endblock:checkOutputs*/
//        }
///*block:CreateBrick*/
//        protected override DefaultBrick CreateBrick() {
//            /*name|pre#FSM:nodeImpl*/FSMPrototype/*endname*/ fsm = new /*name|pre#FSM:nodeImpl*/FSMPrototype/*endname*/();
//            fsm.setDataFromNode( (/*name:nodeImpl*/PrototypeNodeImpl/*endname*/)this);
//            return fsm;
//        }
///*endblock:CreateBrick*/
//    }
//}
/////////////////////////////////////////////////////////////////////////
////
//// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
////
//////////////////////////////////////////////////////////////////////// 
///*endblock:base*/
