
using System.Collections.Generic;
using MoonSharp.Interpreter;

using System;
using Service.Events;
using Zenject;
using UniRx;
using System.Diagnostics;


///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 
namespace Service.PerformanceTest{
    public partial class Commands : CommandsBase {
        IPerformanceTestService _service;

        [Inject]
        void Initialize([Inject] IPerformanceTestService service) {
            _service = service;
            
            this.OnEvent<StartWatchCommand>().Subscribe(e => StartWatchCommandHandler(e)).AddTo(this);

            this.OnEvent<StopWatchCommand>().Subscribe(e => StopWatchCommandHandler(e)).AddTo(this);

            this.OnEvent<PrintPerfTestsCommand>().Subscribe(e => PrintPerfTestsCommandHandler(e)).AddTo(this);

            this.OnEvent<ClearCommand>().Subscribe(e => ClearCommandHandler(e)).AddTo(this);

        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
        public class StartWatchCommand  {
            public string t;
            
            
        }

		protected void StartWatchCommandHandler  (StartWatchCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("StartWatchCommand");
#endif
        _service.StartWatch(cmd.t);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("StartWatchCommand");
#endif
        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
        public class StopWatchCommand  {
            public string t;
            
            
        }

		protected void StopWatchCommandHandler  (StopWatchCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("StopWatchCommand");
#endif
        _service.StopWatch(cmd.t);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("StopWatchCommand");
#endif
        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
        public class PrintPerfTestsCommand  {

            
        }

		protected void PrintPerfTestsCommandHandler  (PrintPerfTestsCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("PrintPerfTestsCommand");
#endif
        _service.PrintPerfTests();
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("PrintPerfTestsCommand");
#endif
        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
        public class ClearCommand  {

            
        }

		protected void ClearCommandHandler  (ClearCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("ClearCommand");
#endif
        _service.Clear();
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("ClearCommand");
#endif
        }
        
    }


    public class CommandsInstaller : Installer<CommandsInstaller>{
        public override void InstallBindings()
        {
            Commands cmds = Container.Instantiate<Commands>();
            // commented out due to zenject update (26.06.18)
            //Container.BindAllInterfaces<Commands>().FromInstance(cmds);
        }
    }
}
///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 


