
using Service.Events;
using System.Collections.Generic;
using MoonSharp.Interpreter;

using System;
using Zenject;
using UniRx;
using System.Diagnostics;


///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 
namespace Service.Scripting{
    public class Commands : CommandsBase {
        IScriptingService _service;

        [Inject]
        void Initialize([Inject] IScriptingService service) {
            _service = service;
            
            this.OnEvent<OpenScriptingConsoleCommand>().Subscribe(e => OpenScriptingConsoleCommandHandler(e)).AddTo(this);

            this.OnEvent<CloseScriptingConsoleCommand>().Subscribe(e => CloseScriptingConsoleCommandHandler(e)).AddTo(this);

            this.OnEvent<ToggleScriptingConsoleCommand>().Subscribe(e => ToggleScriptingConsoleCommandHandler(e)).AddTo(this);

            this.OnEvent<GetMainScriptCommand>().Subscribe(e => GetMainScriptCommandHandler(e)).AddTo(this);

            this.OnEvent<IsScriptingConsoleVisibleCommand>().Subscribe(e => IsScriptingConsoleVisibleCommandHandler(e)).AddTo(this);

            this.OnEvent<ExecuteStringOnMainScriptCommand>().Subscribe(e => ExecuteStringOnMainScriptCommandHandler(e)).AddTo(this);

        }


        public class OpenScriptingConsoleCommand {

            
        }

		protected void OpenScriptingConsoleCommandHandler(OpenScriptingConsoleCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("OpenScriptingConsoleCommand");
#endif
            _service.OpenScriptingConsole();
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("OpenScriptingConsoleCommand");
#endif
        }
        

        public class CloseScriptingConsoleCommand {

            
        }

		protected void CloseScriptingConsoleCommandHandler(CloseScriptingConsoleCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("CloseScriptingConsoleCommand");
#endif
            _service.CloseScriptingConsole();
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("CloseScriptingConsoleCommand");
#endif
        }
        

        public class ToggleScriptingConsoleCommand {

            
        }

		protected void ToggleScriptingConsoleCommandHandler(ToggleScriptingConsoleCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("ToggleScriptingConsoleCommand");
#endif
            _service.ToggleScriptingConsole();
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("ToggleScriptingConsoleCommand");
#endif
        }
        

        public class GetMainScriptCommand {
            public Script result;
            
            
        }

		protected void GetMainScriptCommandHandler(GetMainScriptCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("GetMainScriptCommand");
#endif
            
            cmd.result = _service.GetMainScript();
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("GetMainScriptCommand");
#endif
        }
        

        public class IsScriptingConsoleVisibleCommand {
            public bool result;
            
            
        }

		protected void IsScriptingConsoleVisibleCommandHandler(IsScriptingConsoleVisibleCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("IsScriptingConsoleVisibleCommand");
#endif
            
            cmd.result = _service.IsScriptingConsoleVisible();
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("IsScriptingConsoleVisibleCommand");
#endif
        }
        

        public class ExecuteStringOnMainScriptCommand {
            public string result;
                        public string luaCode;
            
            
        }

		protected void ExecuteStringOnMainScriptCommandHandler(ExecuteStringOnMainScriptCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("ExecuteStringOnMainScriptCommand");
#endif
            
            cmd.result = _service.ExecuteStringOnMainScript(cmd.luaCode);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("ExecuteStringOnMainScriptCommand");
#endif
        }
        
    }


    public class CommandsInstaller : Installer<CommandsInstaller>{
        public override void InstallBindings()
        {
            Commands cmds = Container.Instantiate<Commands>();
            Container.BindAllInterfaces<Commands>().FromInstance(cmds);
        }
    }
}
///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 


