
using System.Collections.Generic;
using MoonSharp.Interpreter;

using System;
using Service.Events;
using Zenject;
using UniRx;
using System.Diagnostics;


///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 
namespace Service.Scripting{
    public partial class Commands : CommandsBase {
        IScriptingService _service;

        [Inject]
        void Initialize([Inject] IScriptingService service) {
            _service = service;
            
            this.OnEvent<GetMainScriptCommand>().Subscribe(e => GetMainScriptCommandHandler(e)).AddTo(this);

            this.OnEvent<ExecuteStringOnMainScriptCommand>().Subscribe(e => ExecuteStringOnMainScriptCommandHandler(e)).AddTo(this);

            this.OnEvent<ExecuteFileToMainScriptCommand>().Subscribe(e => ExecuteFileToMainScriptCommandHandler(e)).AddTo(this);

            this.OnEvent<ExecuteStringOnMainScriptRawCommand>().Subscribe(e => ExecuteStringOnMainScriptRawCommandHandler(e)).AddTo(this);

            this.OnEvent<AutocompleteProposalsCommand>().Subscribe(e => AutocompleteProposalsCommandHandler(e)).AddTo(this);

            this.OnEvent<CreateCoroutineCommand>().Subscribe(e => CreateCoroutineCommandHandler(e)).AddTo(this);

            this.OnEvent<CallbackCommand>().Subscribe(e => CallbackCommandHandler(e)).AddTo(this);

            this.OnEvent<RegisterCallbackCommand>().Subscribe(e => RegisterCallbackCommandHandler(e)).AddTo(this);

            this.OnEvent<TickCommand>().Subscribe(e => TickCommandHandler(e)).AddTo(this);

        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
        public class GetMainScriptCommand  {
            public Script result;
            
            
        }

		protected void GetMainScriptCommandHandler  (GetMainScriptCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("GetMainScriptCommand");
#endif
        
            cmd.result = _service.GetMainScript();
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("GetMainScriptCommand");
#endif
        }
        

        
        /// <summary>
        /// Execute a string into the default-lua-context
        /// </summary>
        
        public class ExecuteStringOnMainScriptCommand  {
            public string result;
                        public string luaCode;
            
            
        }

		protected void ExecuteStringOnMainScriptCommandHandler  (ExecuteStringOnMainScriptCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("ExecuteStringOnMainScriptCommand");
#endif
        
            cmd.result = _service.ExecuteStringOnMainScript(cmd.luaCode);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("ExecuteStringOnMainScriptCommand");
#endif
        }
        

        
        /// <summary>
        /// Load a script into the default lua-context
        /// </summary>
        
        public class ExecuteFileToMainScriptCommand  {
            public string result;
                        public string fileName;
                        public bool useScriptDomain=false;
            
            
        }

		protected void ExecuteFileToMainScriptCommandHandler  (ExecuteFileToMainScriptCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("ExecuteFileToMainScriptCommand");
#endif
        
            cmd.result = _service.ExecuteFileToMainScript(cmd.fileName,cmd.useScriptDomain);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("ExecuteFileToMainScriptCommand");
#endif
        }
        

        
        /// <summary>
        /// Load a script into the default lua-context
        /// </summary>
        
        public class ExecuteStringOnMainScriptRawCommand  {
            public DynValue result;
                        public string fileName;
            
            
        }

		protected void ExecuteStringOnMainScriptRawCommandHandler  (ExecuteStringOnMainScriptRawCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("ExecuteStringOnMainScriptRawCommand");
#endif
        
            cmd.result = _service.ExecuteStringOnMainScriptRaw(cmd.fileName);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("ExecuteStringOnMainScriptRawCommand");
#endif
        }
        

        
        /// <summary>
        /// Generates a list of possible proposals
        /// </summary>
        
        public class AutocompleteProposalsCommand  {
            public Proposal result;
                        public string currentInput;
                        public int cursorPos;
            
            
        }

		protected void AutocompleteProposalsCommandHandler  (AutocompleteProposalsCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("AutocompleteProposalsCommand");
#endif
        
            cmd.result = _service.AutocompleteProposals(cmd.currentInput,cmd.cursorPos);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("AutocompleteProposalsCommand");
#endif
        }
        

        
        /// <summary>
        /// Creates a lua coroutine
        /// </summary>
        
        public class CreateCoroutineCommand  {
            public LuaCoroutine result;
                        public DynValue funcName;
            
            
        }

		protected void CreateCoroutineCommandHandler  (CreateCoroutineCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("CreateCoroutineCommand");
#endif
        
            cmd.result = _service.CreateCoroutine(cmd.funcName);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("CreateCoroutineCommand");
#endif
        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
        public class CallbackCommand  {
            public string cbtype;
                        public object o2=null;
                        public object o3=null;
            
            
        }

		protected void CallbackCommandHandler  (CallbackCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("CallbackCommand");
#endif
        _service.Callback(cmd.cbtype,cmd.o2,cmd.o3);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("CallbackCommand");
#endif
        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
        public class RegisterCallbackCommand  {
            public Action<string,object,object> cbCallbackFunc;
            
            
        }

		protected void RegisterCallbackCommandHandler  (RegisterCallbackCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("RegisterCallbackCommand");
#endif
        _service.RegisterCallback(cmd.cbCallbackFunc);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("RegisterCallbackCommand");
#endif
        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
        public class TickCommand  {
            public float dt;
            
            
        }

		protected void TickCommandHandler  (TickCommand cmd) {
#if PERFORMANCE_TEST
            var ptest=Service.Performance.PerformanceTest.Get();
            ptest.Start("TickCommand");
#endif
        _service.Tick(cmd.dt);
#if PERFORMANCE_TEST
            // now stop the watches
            ptest.Stop("TickCommand");
#endif
        }
        
    }


    public class CommandsInstaller : Installer<CommandsInstaller>{
        public override void InstallBindings()
        {
            Commands cmds = Container.Instantiate<Commands>();
            // commented out due to zenject update (26.06.18)
            //Container.BindAllInterfaces<Commands>().FromInstance(cmds);
        }
    }
}
///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 


