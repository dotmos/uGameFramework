## service start
using System.Collections.Generic;
using MoonSharp.Interpreter;
using ECS;
using UniRx;
  
namespace Service.DevUIService {
	 
	     
    public interface IDevUIService {
    	## "Get ReaciveDictionar of all views"  
    	("ReactiveCollection<DevUIView>") GetRxViews();	
    	## "Add/Create view with name"
		("DevUIView") CreateView(string viewName,bool dynamicallyCreated=False, bool extensionAllowed=True);
		## "Get a view by name"
		("DevUIView") GetView(string viewName);
		## "Check if view already exists"
		bool ViewNameExists(string viewName);
		## "Remove View from data model"
		void RemoveViewFromModel(("DevUIView") view);
		## "Remove View from views-folder and put it to the archieve-folder"
		void RemoveViewToArchieve(("DevUIView") view);
		     
		## "Load views from views-folder"
		("IObservable<float>") LoadViews();
		## "Save views and its dynamically created elements"
		void SaveViews();
		## "Output to console"
		void WriteToScriptingConsole(string text);
		## "Open the console"
		void OpenScriptingConsole();
		## "Close the console"
		void CloseScriptingConsole();
		## "Toggle the console visibility"
		void ToggleScriptingConsole();
		## "Check if console is visible at the moment"
		bool IsScriptingConsoleVisible(); 
		## "Start entity picking mode"
		void StartPickingEntity();
		
		("DevUIView") CreateViewFromEntity(("UID") entity,string name="");
		("DevUIView") CreateViewFromPOCO(object entity,string name); 
		
		void CreateDataBrowserTopLevelElement(string name,("System.Collections.IList") objectList);
		List<DataBrowserTopLevel> GetDataBrowserTopLevelElements();
		## "map one object type to another"
		void AddDataBrowserObjectConverter(("Type") objType, ("Func<object,object>") converter);
		## "try to convert the inObject, if no conversion is possible return the inObject"
		object DataBrowserConvertObject(object inObject);
		
		void OutputGameInfo(float systemStartupTime);
    }   
}          
## model

public class DataBrowserTopLevel{
	public string topLevelName;
	public ("System.Collections.IList") objectList;
}
 
public class HistoryElement {
    public ("System.Collections.IList") objectList;
    public string historyTitle;
} 

## events  

// testing dataexplorer

public class NewDataTable {
	## "List of objects that should be visualized"
	public ("System.Collections.IList") objectList;
	## "A list of objects to which the view can jump back"
	public List<HistoryElement> history; 
	## "The title of this table"
	public string tableTitle;
}  
 
//---------------------

public class NewUIElement {
	public ("DevUIElement") elem;
	public ("DevUIView") view;
	public bool inEditMode;
}

public class WriteToScriptingConsole{
	public string text;
}
public class ScriptingConsoleOpened{}
public class ScriptingConsoleClosed{}
public class UIViewRenamed{
	public string from;
	public string to;
	public ("DevUIView") view;
}
public class PickedEntity{
	public ("ECS.UID") entity;
}
public class UIViewFocused { 
	public ("DevUIView") focusedView;
}

public class GameInfoChanged {
	public float systemStartupTime;
}

## service end