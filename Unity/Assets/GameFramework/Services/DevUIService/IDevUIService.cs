///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 

using System;
using System.Collections.Generic;
using MoonSharp.Interpreter;

using static Service.DevUIService.Events;
using UniRx;
using Zenject;
using System.Runtime.Serialization;

namespace Service.DevUIService {
    public interface IDevUIService {



		/// <summary>
        /// Get ReaciveDictionar of all views 
 /// </summary>
        

					ReactiveCollection<DevUIView> GetRxViews();


		/// <summary>
        /// Add/Create view with name 
        /// <param name="viewName"></param>
        /// <param name="dynamicallyCreated"></param>
 /// </summary>
        

					DevUIView CreateView(string viewName,bool dynamicallyCreated=false);


		/// <summary>
        /// Get a view by name 
        /// <param name="viewName"></param>
 /// </summary>
        

					DevUIView GetView(string viewName);


		/// <summary>
        /// Check if view already exists 
        /// <param name="viewName"></param>
 /// </summary>
        

					bool ViewNameExists(string viewName);


		/// <summary>
        /// Remove View from data model 
        /// <param name="view"></param>
 /// </summary>
        

					void RemoveViewFromModel(DevUIView view);


		/// <summary>
        /// Remove View from views-folder and put it to the archieve-folder 
        /// <param name="view"></param>
 /// </summary>
        

					void RemoveViewToArchieve(DevUIView view);


		/// <summary>
        /// Load views from views-folder 
 /// </summary>
        

					void LoadViews();


		/// <summary>
        /// Save views and its dynamically created elements 
 /// </summary>
        

					void SaveViews();


		/// <summary>
        /// Output to console 
        /// <param name="text"></param>
 /// </summary>
        

					void WriteToScriptingConsole(string text);


		/// <summary>
        /// Open the console 
 /// </summary>
        

					void OpenScriptingConsole();


		/// <summary>
        /// Close the console 
 /// </summary>
        

					void CloseScriptingConsole();


		/// <summary>
        /// Toggle the console visibility 
 /// </summary>
        

					void ToggleScriptingConsole();


		/// <summary>
        /// Check if console is visible at the moment 
 /// </summary>
        

					bool IsScriptingConsoleVisible();


		/// <summary>
        /// Start entity picking mode 
 /// </summary>
        

					void StartPickingEntity();

	}



}
///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 
