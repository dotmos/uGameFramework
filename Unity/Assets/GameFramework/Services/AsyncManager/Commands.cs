

using System;
using Service.Events;
using Zenject;
using UniRx;
using System.Diagnostics;


///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 
namespace Service.AsyncManager{
    public partial class Commands : CommandsBase {
        IAsyncManager _service;

        [Inject]
        void Initialize([Inject] IAsyncManager service) {
//            _service = service;
//            
//            this.OnEvent<AddToMainThreadCommand>().Subscribe(e => AddToMainThreadCommandHandler(e)).AddTo(this);
//
//            this.OnEvent<AddToWorkerThreadCommand>().Subscribe(e => AddToWorkerThreadCommandHandler(e)).AddTo(this);
//
//            this.OnEvent<CallCommand>().Subscribe(e => CallCommandHandler(e)).AddTo(this);
//
//            this.OnEvent<DisposeThreadsCommand>().Subscribe(e => DisposeThreadsCommandHandler(e)).AddTo(this);
//
        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
//        public class AddToMainThreadCommand  {
//            public AsyncFuture result;
//                        public Action act;
//                        public bool global=false;
//            
//            
//        }

//		protected void AddToMainThreadCommandHandler  (AddToMainThreadCommand cmd) {
//#if PERFORMANCE_TEST
//            var ptest=Service.Performance.PerformanceTest.Get();
//            ptest.Start("AddToMainThreadCommand");
//#endif
//        
//            cmd.result = _service.AddToMainThread(cmd.act,cmd.global);
//#if PERFORMANCE_TEST
//            // now stop the watches
//            ptest.Stop("AddToMainThreadCommand");
//#endif
//        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
//        public class AddToWorkerThreadCommand  {
//            public AsyncFuture result;
//                        public Action act;
//                        public Action onFinished;
//                        public bool global=false;
//            
//            
//        }

//		protected void AddToWorkerThreadCommandHandler  (AddToWorkerThreadCommand cmd) {
//#if PERFORMANCE_TEST
//            var ptest=Service.Performance.PerformanceTest.Get();
//            ptest.Start("AddToWorkerThreadCommand");
//#endif
//        
//            cmd.result = _service.AddToWorkerThread(cmd.act,cmd.onFinished,cmd.global);
//#if PERFORMANCE_TEST
//            // now stop the watches
//            ptest.Stop("AddToWorkerThreadCommand");
//#endif
//        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
//        public class CallCommand  {
//            public AsyncFuture result;
//                        public Action act;
//                        public bool usingCoroutine;
//                        public bool global=false;
//            
//            
//        }

//		protected void CallCommandHandler  (CallCommand cmd) {
//#if PERFORMANCE_TEST
//            var ptest=Service.Performance.PerformanceTest.Get();
//            ptest.Start("CallCommand");
//#endif
//        
//            cmd.result = _service.Call(cmd.act,cmd.usingCoroutine,cmd.global);
//#if PERFORMANCE_TEST
//            // now stop the watches
//            ptest.Stop("CallCommand");
//#endif
//        }
        

        
        /// <summary>
        /// 
        /// </summary>
        
//        public class DisposeThreadsCommand  {
//            public bool onlyNonGlobals=false;
//            
//            
//        }

//		protected void DisposeThreadsCommandHandler  (DisposeThreadsCommand cmd) {
//#if PERFORMANCE_TEST
//            var ptest=Service.Performance.PerformanceTest.Get();
//            ptest.Start("DisposeThreadsCommand");
//#endif
//        _service.DisposeThreads(cmd.onlyNonGlobals);
//#if PERFORMANCE_TEST
//            // now stop the watches
//            ptest.Stop("DisposeThreadsCommand");
//#endif
//        }
        
    }


    public class CommandsInstaller : Installer<CommandsInstaller>{
        public override void InstallBindings()
        {
//            Commands cmds = Container.Instantiate<Commands>();
            // commented out due to zenject update (26.06.18)
            //Container.BindAllInterfaces<Commands>().FromInstance(cmds);
        }
    }
}
///////////////////////////////////////////////////////////////////////
//
// WARNING: THIS FILE IS AUTOGENERATED! DO NOT CHANGE IT
//
////////////////////////////////////////////////////////////////////// 


